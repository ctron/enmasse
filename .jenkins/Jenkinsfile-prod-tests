#!/usr/bin/env groovy

def lib = evaluate readTrusted('.jenkins/jenkins-functions.groovy')
def report = evaluate readTrusted('.jenkins/jenkins-reporting.groovy')

pipeline {
    options {
        timeout(time: 18, unit: 'HOURS')
    }
    environment {
        TAG = "${params.TAG}"
        ARTIFACTS_DIR = 'artifacts'
        OPENSHIFT_PROJECT = "amq-online-infra"
        KUBERNETES_API_URL = "${params.OCP_API_URL}"
        OPENSHIFT_PASSWD = "admin"
        OPENSHIFT_USER = "admin"
        KUBERNETES_DOMAIN = "${params.OCP_DOMAIN}"
        ARTIFACTS_URL = 'http://messaging-qe-repo.usersys.redhat.com:8081/artifactory'
        REPORT_NAME = "surefire-reports"
        PRODUCT_VERSION = "${params.PRODUCT_VERSION}"
        PRODUCT_SUBVERSION = "${params.PRODUCT_SUBVERSION}"
        OC_VERSION = "${params.OC_VERSION}"
        REGISTRY_TYPE = "${params.CONTAINER_REGISTRY}"
        DOCKER_REGISTRY = "${params.AMQ_ONLINE_CONTAINER_REGISTRY_URL}"
        PRODUCT_DOCKER_REGISTRY = "${params.PRODUCT_CONTAINER_REGISTRY_URL}"
        OCP4_EXTERNAL_IMAGE_REGISTRY = "${params.OCP4_EXTERNAL_IMAGE_REGISTRY}"
        OCP4_INTERNAL_IMAGE_REGISTRY = "${params.OCP4_INTERNAL_IMAGE_REGISTRY}"
        SYSTEMTESTS_CREDENTIALS_USER = "user"
        SYSTEMTESTS_CREDENTIALS_PASSWORD = "user"
    }
    agent {
        node {
            label "${params.AGENT_LABEL}"
        }
    }
    stages {
        stage('wait for agent ready') {
            steps {
                script {
                    lib.waitUntilAgentReady()
                }
            }
        }
        stage('clean') {
            steps {
                cleanWs()
            }
        }
        stage('checkout') {
            steps {
                dir('enmasse') {
                    checkout scm
                }
                dir('amq-online-images') {
                    checkout([
                            $class           : 'GitSCM',
                            branches         : [[name: "*/${env.CE_BRANCH}"]],
                            userRemoteConfigs: [[url: 'https://github.com/jboss-container-images/amq-online-images.git']]
                    ])
                }
                dir('dtests-config') {
                    checkout([
                            $class                           : 'GitSCM',
                            branches                         : [[name: "master"]],
                            doGenerateSubmoduleConfigurations: false,
                            extensions                       : [[$class: 'CleanCheckout',
                                                                 $class: 'RelativeTargetDirectory']],
                            submoduleCfg                     : [],
                            userRemoteConfigs                : [[url          : 'ssh+git://git@bitbucket.org/msgqe/dtests-config.git',
                                                                 credentialsId: '46503a95-483b-42df-aeff-c4e2a7045169']],
                    ])
                }
            }
        }
        stage('install openshift enterprise') {
            when {
                expression { params.INSTALL_OCP == 'true' }
            }
            steps {
                script {
                    lib.installOcp3("install-openshift", "amq-online-${BUILD_NUMBER}", "${env.REGISTRY_TYPE}")
                }
            }
        }
        stage('add localhost to the ocp domain') {
            when {
                anyOf {
                    expression { params.INSTALL_OCP == 'true' }
                    expression { params.OCP_DNS_IP != '' }
                }
            }
            steps {
                script {
                    lib.addTestNodeToOcpDns(params.OCP_DNS_IP, env.OC_BUILD_NUMBER)
                }
            }
        }
        stage('download templates') {
            steps {
                dir('enmasse') {
                    script {
                        lib.copyTemplatesAndSetRegistries(env.TAG, env.DOCKER_REGISTRY, env.PRODUCT_DOCKER_REGISTRY)
                    }
                }
            }
        }
        stage('set up openshift 4') {
            when {
                expression { env.OC_VERSION == '4' }
            }
            steps {
                dir('enmasse') {
                    script {
                        lib.loginOCUser(false)
                        lib.setUpOcp4()
                    }
                }
            }
        }
        stage('install enmasse') {
            steps {
                dir('enmasse') {
                    script {
                        lib.installEnmasse(env.TAG, false, false, false, params.DEPLOY_IOT)
                    }
                }
            }
        }
        stage('system tests') {
            environment {
                USE_DUMMY_ADDRESS = true
            }
            steps {
                dir('enmasse') {
                    script {
                        catchError {
                            lib.runSystemtests(params.TEST_PROFILE, params.TEST_CASE)
                        }
                    }
                }
            }
        }
        stage('push data into artifactory') {
            when {
                expression { params.REPORT_RESULTS == 'true' }
            }
            steps {
                script {
                    report.pushJunitArtifacts(env.ARTIFACTS_URL, env.PRODUCT_VERSION, env.REPORT_NAME, BUILD_TAG)
                }
            }
        }
        stage('trigger Polarion reporter job') {
            when {
                expression { params.REPORT_RESULTS == 'true' }
            }
            steps {
                script {
                    def REPORT_SUFFIX = ""
                    if (params.DEPLOY_IOT) {
                        REPORT_SUFFIX = "-iot"
                    }
                    def PARAMS = "report_data/product/maas/${env.PRODUCT_VERSION}/${env.PRODUCT_SUBVERSION}/${env.OC_VERSION}${REPORT_SUFFIX}/polarion_executor_params.json"
                    def REPORT_FILE_URL = "${env.ARTIFACTS_URL}/enmasse-test-results/${env.PRODUCT_VERSION}/${env.REPORT_NAME}_${BUILD_TAG}.zip"
                    report.triggerReporting(REPORT_FILE_URL, PARAMS, env.PRODUCT_VERSION, env.PRODUCT_SUBVERSION, env.OC_VERSION)
                }
            }
        }
    }
    post {
        always {
            dir('enmasse') {
                script {
                    lib.postAction(env.ARTIFACTS_DIR)
                    if (params.INSTALL_OCP == 'true') {
                        build job: 'delete-openshift', wait: false, parameters: [
                                [$class: 'StringParameterValue', name: 'SUFFIX', value: "amq-online-${BUILD_NUMBER}"],
                                [$class: 'StringParameterValue', name: 'OC_BUILD_NUMBER', value: "${env.OC_BUILD_NUMBER}"],
                        ]
                    }
                    if (env.OC_VERSION == '4') {
                        lib.uninstallEnmasse(env.TAG, env.OPENSHIFT_PROJECT)
                        lib.deleteImages(env.OCP4_INTERNAL_IMAGE_REGISTRY)
                    }
                }
            }
        }
        failure {
            script {
                lib.sendMail(env.MAILING_LIST, env.JOB_NAME, env.BUILD_URL)
            }
        }
    }
}
